{"/home/travis/build/npmtest/node-npmtest-gulp-awspublish/test.js":"/* istanbul instrument in package npmtest_gulp_awspublish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-awspublish/lib.npmtest_gulp_awspublish.js":"/* istanbul instrument in package npmtest_gulp_awspublish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_awspublish = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_awspublish = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-awspublish/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-awspublish && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_awspublish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_awspublish\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_awspublish.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_awspublish.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_awspublish.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_awspublish.__dirname + '/lib.npmtest_gulp_awspublish.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-awspublish/node_modules/gulp-awspublish/lib/index.js":"var AWS = require('aws-sdk'),\n    converter = require('./converter'),\n    Stream = require('stream'),\n    fs = require('fs'),\n    through = require('through2'),\n    zlib = require('zlib'),\n    crypto = require('crypto'),\n    mime = require('mime'),\n    pascalCase = require('pascal-case'),\n    File = require('vinyl'),\n    gutil = require('gulp-util');\n\nvar PLUGIN_NAME = 'gulp-awspublish';\n\n/**\n * calculate file hash\n * @param  {Buffer} buf\n * @return {String}\n *\n * @api private\n */\n\nfunction md5Hash(buf) {\n  return crypto\n    .createHash('md5')\n    .update(buf)\n    .digest('hex');\n}\n\n/**\n * Determine the content type of a file based on charset and mime type.\n * @param  {Object} file\n * @return {String}\n *\n * @api private\n */\n\nfunction getContentType(file) {\n  var mimeType = mime.lookup(file.unzipPath || file.path);\n  var charset = mime.charsets.lookup(mimeType);\n\n  return charset\n    ? mimeType + '; charset=' + charset.toLowerCase()\n    : mimeType;\n}\n\n/**\n * Turn the HTTP style headers into AWS Object params\n */\n\nfunction toAwsParams(file) {\n  var params = {};\n\n  var headers = file.s3.headers || {};\n\n  for (var header in headers) {\n    if (header === 'x-amz-acl') {\n\n      params.ACL = headers[header];\n    } else if(header ==='Content-MD5') {\n\n       params['ContentMD5'] = headers[header];\n    } else {\n\n      params[pascalCase(header)] = headers[header];\n    }\n  }\n\n  params.Key = file.s3.path;\n  params.Body = file.contents;\n\n  return params;\n}\n\nmodule.exports._toAwsParams = toAwsParams;\n\n/**\n * init file s3 hash\n * @param  {Vinyl} file file object\n *\n * @return {Vinyl} file\n * @api private\n */\n\nfunction initFile(file) {\n  if (!file.s3) {\n    file.s3 = {};\n    file.s3.headers = {};\n    file.s3.path = file.relative.replace(/\\\\/g, '/');\n  }\n  return file;\n}\n\n/**\n * init file s3 hash\n * @param  {String} key filepath\n * @param  {Array} whitelist list of expressions that match against files that should not be deleted\n *\n * @return {Boolean} shouldDelete whether the file should be deleted or not\n * @api private\n */\n\nfunction fileShouldBeDeleted (key, whitelist) {\n  for (var i = 0; i < whitelist.length; i++) {\n    var expr = whitelist[i];\n    if (expr instanceof RegExp) {\n      if (expr.test(key)) {\n        return false;\n      }\n    } else if (typeof expr === 'string') {\n      if (expr === key) {\n        return false;\n      }\n    } else {\n      throw new Error('whitelist param can only contain regular expressions or strings');\n    }\n  }\n  return true;\n}\n\nfunction buildDeleteMultiple(keys) {\n  if (!keys || !keys.length) return;\n\n  var deleteObjects = keys.map(function (k) { return { Key: k }; });\n\n  return {\n    Delete: {\n      Objects: deleteObjects\n    }\n  };\n}\n\nmodule.exports._buildDeleteMultiple = buildDeleteMultiple;\n\n/**\n * create a through stream that gzip files\n * file content is gziped and Content-Encoding is added to s3.headers\n * @param  {Object} options\n *\n * options keys are:\n *   ext: extension to add to gzipped files\n *\n * @return {Stream}\n * @api public\n */\n\nmodule.exports.gzip = function(options) {\n\n  if (!options) options = {};\n  if (!options.ext) options.ext = '';\n\n  return through.obj(function (file, enc, cb) {\n\n    // Do nothing if no contents\n    if (file.isNull()) return cb();\n\n    // streams not supported\n    if (file.isStream()) {\n      this.emit('error',\n        new gutil.PluginError(PLUGIN_NAME, 'Stream content is not supported'));\n      return cb();\n    }\n\n    // check if file.contents is a `Buffer`\n    if (file.isBuffer()) {\n\n      initFile(file);\n\n      // add content-encoding header\n      file.s3.headers['Content-Encoding'] = 'gzip';\n\n      // zip file\n      zlib.gzip(file.contents, options, function(err, buf) {\n        if (err) return cb(err);\n        file.unzipPath = file.path;\n        file.path += options.ext;\n        file.s3.path += options.ext;\n        file.contents = buf;\n        cb(err, file);\n      });\n    }\n  });\n};\n\n/**\n * create a through stream that print s3 status info\n * @param {Object} param parameter to pass to logger\n *\n * @return {Stream}\n * @api public\n */\n\nmodule.exports.reporter = function(param) {\n  return require('./log-reporter')(param);\n};\n\n/**\n * create a new Publisher\n * @param {Object} S3 options as per http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property\n * @api private\n */\n\nfunction Publisher(AWSConfig, cacheOptions) {\n  this.config = AWSConfig;\n  this.client = new AWS.S3(AWSConfig);\n  var bucket = this.config.params.Bucket;\n\n  if (!bucket) {\n    throw new Error('Missing `params.Bucket` config value.');\n  }\n\n\n  // init Cache file\n  this._cacheFile = cacheOptions && cacheOptions.cacheFileName\n    ? cacheOptions.cacheFileName\n    : '.awspublish-' + bucket;\n\n  // load cache\n  try {\n    this._cache = JSON.parse(fs.readFileSync(this.getCacheFilename(), 'utf8'));\n  } catch (err) {\n    this._cache = {};\n  }\n}\n\n/**\n * generates cache filename.\n * @return {String}\n * @api private\n */\n\nPublisher.prototype.getCacheFilename = function() {\n  return this._cacheFile;\n};\n\n/**\n * create a through stream that save file in cache\n *\n * @return {Stream}\n * @api public\n */\n\nPublisher.prototype.cache = function() {\n  var _this = this,\n      counter = 0;\n\n  function saveCache() {\n    fs.writeFileSync(_this.getCacheFilename(), JSON.stringify(_this._cache));\n  }\n\n  var stream = through.obj(function (file, enc, cb) {\n    if (file.s3 && file.s3.path) {\n\n      // do nothing for file already cached\n      if (file.s3.state === 'cache') return cb(null, file);\n\n      // remove deleted\n      if (file.s3.state === 'delete') {\n        delete _this._cache[file.s3.path];\n\n      // update others\n      } else if (file.s3.etag) {\n        _this._cache[file.s3.path] = file.s3.etag;\n      }\n\n      // save cache every 10 files\n      if (++counter % 10) saveCache();\n    }\n\n    cb(null, file);\n  });\n\n  stream.on('finish', saveCache);\n\n  return stream;\n};\n\n\n/**\n * create a through stream that publish files to s3\n * @headers {Object} headers additional headers to add to s3\n * @options {Object} options option hash\n *\n * available options are:\n * - force {Boolean} force upload\n * - noAcl: do not set x-amz-acl by default\n * - simulate: debugging option to simulate s3 upload\n * - createOnly: skip file updates\n *\n * @return {Stream}\n * @api public\n */\n\nPublisher.prototype.publish = function (headers, options) {\n\n  var _this = this;\n\n  // init opts\n  if (!options) options = { force: false };\n\n  // init param object\n  if (!headers) headers = {};\n\n  // add public-read header by default\n  if(!headers['x-amz-acl'] && !options.noAcl) headers['x-amz-acl'] = 'public-read';\n\n  return through.obj(function (file, enc, cb) {\n    var header, etag;\n\n    // Do nothing if no contents\n    if (file.isNull()) return cb();\n\n    // streams not supported\n    if (file.isStream()) {\n      this.emit('error',\n        new gutil.PluginError(PLUGIN_NAME, 'Stream content is not supported'));\n      return cb();\n    }\n\n    // check if file.contents is a `Buffer`\n    if (file.isBuffer()) {\n\n      initFile(file);\n\n      // calculate etag\n      etag = '\"' + md5Hash(file.contents) + '\"';\n\n      // delete - stop here\n      if (file.s3.state === 'delete') return cb(null, file);\n\n      // check if file is identical as the one in cache\n      if (!options.force && _this._cache[file.s3.path] === etag) {\n        file.s3.state = 'cache';\n        return cb(null, file);\n      }\n\n      // add content-type header\n      if (!file.s3.headers['Content-Type']) file.s3.headers['Content-Type'] = getContentType(file);\n\n      // add content-length header\n      if (!file.s3.headers['Content-Length']) file.s3.headers['Content-Length'] = file.contents.length;\n\n      // add extra headers\n      for (header in headers) file.s3.headers[header] = headers[header];\n\n      if (options.simulate) return cb(null, file);\n\n      // get s3 headers\n      _this.client.headObject({ Key: file.s3.path }, function(err, res) {\n        //ignore 403 and 404 errors since we're checking if a file exists on s3\n        if (err && [403, 404].indexOf(err.statusCode) < 0) return cb(err);\n\n        res = res || {};\n\n        // skip: no updates allowed\n        var noUpdate = options.createOnly && res.ETag;\n\n        // skip: file are identical\n        var noChange = !options.force && res.ETag === etag;\n\n        if (noUpdate || noChange) {\n          file.s3.state = 'skip';\n          file.s3.etag = etag;\n          file.s3.date = new Date(res.LastModified);\n          cb(err, file);\n\n        // update: file are different\n        } else {\n          file.s3.state = res.ETag\n            ? 'update'\n            : 'create';\n\n          _this.client.putObject(toAwsParams(file), function(err) {\n            if (err) return cb(err);\n\n            file.s3.date = new Date();\n            file.s3.etag = etag;\n            cb(err, file);\n          });\n        }\n      });\n    }\n  });\n};\n\n/**\n * Sync file in stream with file in the s3 bucket\n * @param {String} prefix prefix to sync a specific directory\n * @param {Array} whitelistedFiles list of expressions that match against files that should not be deleted\n *\n * @return {Stream} a transform stream that stream both new files and delete files\n * @api public\n */\n\nPublisher.prototype.sync = function(prefix, whitelistedFiles) {\n  var client = this.client,\n      stream = new Stream.Transform({ objectMode : true }),\n      newFiles = {},\n      prefix = prefix || '',\n      whitelistedFiles = whitelistedFiles || [];\n\n  // push file to stream and add files to s3 path to list of new files\n  stream._transform = function(file, encoding, cb) {\n    newFiles[file.s3.path] = true;\n    this.push(file);\n    cb();\n  };\n\n  stream._flush = function(cb) {\n    var toDelete = [],\n        lister;\n\n    lister = client.listObjects({ Prefix: prefix })\n      .createReadStream()\n      .pipe(converter('Key'));\n\n    lister.on('data', function (key) {\n      var deleteFile;\n      if (newFiles[key]) return;\n      if (!fileShouldBeDeleted(key, whitelistedFiles)) return;\n\n      deleteFile = new File({});\n      deleteFile.s3 = {\n        path: key,\n        state: 'delete',\n        headers: {}\n      };\n\n      stream.push(deleteFile);\n      toDelete.push(key);\n    });\n\n    lister.on('end', function() {\n      if (!toDelete.length) return cb();\n      client.deleteObjects(buildDeleteMultiple(toDelete), cb);\n    });\n  };\n\n  return stream;\n};\n\n/**\n * Shortcut for `new Publisher()`.\n *\n * @param {Object} AWSConfig\n * @param {Object} cacheOptions\n * @return {Publisher}\n *\n * @api public\n */\n\nexports.create = function(AWSConfig, cacheOptions){\n  return new Publisher(AWSConfig, cacheOptions);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-awspublish/node_modules/gulp-awspublish/lib/converter.js":"var xmlNodes = require('xml-nodes');\nvar xmlObjects = require('xml-objects');\nvar pumpify = require('pumpify');\n\nmodule.exports = function(nodeFilter) {\n  var nodes = xmlNodes(nodeFilter);\n  var objects = xmlObjects({ explicitRoot: false, explicitArray: false, mergeAttrs: true });\n  return pumpify.obj(nodes, objects)\n};\n"}